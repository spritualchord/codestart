#include <iostream>

using namespace std;

template <typename T>
class Node {
public:
    T data;
    Node* next;

    Node(T value) : data(value), next(nullptr) {}
};

template <typename T>
class CircularLinkedList {
private:
    Node<T>* head;

public:
    CircularLinkedList() : head(nullptr) {}

    // Function to insert an element in the list
    void insert(T value) {
        Node<T>* newNode = new Node<T>(value);

        if (head == nullptr) {
            head = newNode;
            head->next = head; // Circular reference to itself
        } else {
            Node<T>* current = head;
            while (current->next != head) {
                current = current->next;
            }

            current->next = newNode;
            newNode->next = head;
        }
    }

    // Function to remove an element from the list
    void remove(T value) {
        if (head == nullptr) {
            cout << "List is empty\n";
            return;
        }

        Node<T>* current = head;
        Node<T>* prev = nullptr;

        // Traverse the list to find the node with the specified value
        do {
            if (current->data == value) {
                if (prev == nullptr) {
                    // Removing the head node
                    Node<T>* lastNode = head;
                    while (lastNode->next != head) {
                        lastNode = lastNode->next;
                    }

                    if (head == head->next) {
                        // Only one node in the list
                        delete head;
                        head = nullptr;
                    } else {
                        // Update the last node's next pointer and move head to the next node
                        lastNode->next = head->next;
                        delete head;
                        head = lastNode->next;
                    }
                } else {
                    // Removing a non-head node
                    prev->next = current->next;
                    delete current;
                }

                cout << "Element " << value << " removed from the list\n";
                return;
            }

            prev = current;
            current = current->next;

        } while (current != head);

        cout << "Element " << value << " not found in the list\n";
    }

    // Function to search for an element in the list and return its pointer
    Node<T>* search(T value) {
        if (head == nullptr) {
            cout << "List is empty\n";
            return nullptr;
        }

        Node<T>* current = head;

        do {
            if (current->data == value) {
                return current;
            }

            current = current->next;

        } while (current != head);

        cout << "Element " << value << " not found in the list\n";
        return nullptr;
    }

    // Function to display the elements of the list
    void display() {
        if (head == nullptr) {
            cout << "List is empty\n";
            return;
        }

        Node<T>* current = head;

        do {
            cout << current->data << " ";
            current = current->next;

        } while (current != head);

        cout << endl;
    }
};

int main() {
    CircularLinkedList<int> myList;

    myList.insert(1);
    myList.insert(2);
    myList.insert(3);

    myList.display(); // Output: 1 2 3

    myList.remove(2);
    myList.display(); // Output: 1 3

    Node<int>* searchResult = myList.search(3);
    if (searchResult != nullptr) {
        cout << "Element 3 found at address: " << searchResult << endl;
    }

    return 0;
}
